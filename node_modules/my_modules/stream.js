var mongoose = require('mongoose');
var async = require('async');
var ipc = require('electron').ipcMain;

// TODO : ツイートとタグの参照関係が保たれない可能性があるのでどうにかする
// TODO : データモデルの定義は別ファイルに切り出す
var tweetSchema = new mongoose.Schema({
  tags: { name: [String] },
  body:  {
    text: String,
    tweeted_at: String
  },
  user: {
    name: String,
    screen_name: String
  },
  create_at: { type: Date, default: Date.now }
});
mongoose.model('Tweet', tweetSchema);
var Tweet = mongoose.model('Tweet');
exports.Tweet = Tweet;

var tagSchema = new mongoose.Schema({
  name: String
});
mongoose.model('Tag', tagSchema);
var Tag = mongoose.model('Tag');
exports.Tag = Tag;

exports.streaming = function(
  TWITTER_CONSUMER_KEY,
  TWITTER_CONSUMER_SECRET,
  ACCESS_TOKEN_KEY,
  ACCESS_TOKEN_SECRET,
  mainWindow
) {
  var Stream = require('user-stream');
  var user_stream;
  try {
    user_stream = new Stream({
    consumer_key: TWITTER_CONSUMER_KEY,
    consumer_secret: TWITTER_CONSUMER_SECRET,
    access_token_key: ACCESS_TOKEN_KEY,
    access_token_secret: ACCESS_TOKEN_SECRET
  });
  } catch (e) {
    console.log(e);
    return;
  }
  user_stream.stream();
  user_stream.on('data', function(json) {
    if (json['text'] != undefined) {
      var tags = HashTagParser(json['text']);
      if (tags.indexOf('kirokutron') >= 0) {
        // TODO : タグとツイートの保存を同期し，終了してから renderer に通知する

        // タグを見て，存在すれば何もしない．存在しなければ登録する
        var calls = [];
        tags.forEach(function(tag_name) {
          calls.push(function(callback) {
            Tag.find({ name: tag_name }, function(err, docs) {
              if (docs.length == 0) {
                var tag = new Tag();
                tag.name = tag_name;
                console.log("saved tag : " + tag_name);
                tag.save(function(err, data){
                  if (err) return console.error("error : " + err);
                  return console.log("Save tag!");
                });
              }
            }).exec(callback);
          });
        });

        async.series(calls, function(err, result) {
          if (err)
            return console.log("Error : " + err);
          return null;
        });

        // ツイートの記録
        var tweet = new Tweet();
        tweet.tags = {
          name: tags
        };
        tweet.body = {
          text: json['text'],
          tweeted_at: json['created_at']
        };
        tweet.user = {
          name: json['user']['name'],
          screen_name: json['user']['screen_name']
        };
        tweet.save(function(err, data){
          if (err) return console.error(err);
          mainWindow.webContents.send('db-updated', 'saved');
          return console.log("Save tweet!");
        });
      }
    }
  });
};

function HashTagParser(str) {
  var tags = [];

  var hash = '#＃';
  var tag = 'A-Za-z〃々ぁ-ゖ゛-ゞァ-ヺーヽヾ一-龥Ａ-Ｚａ-ｚｦ-ﾟ';
  var digit = '0-9０-９';
  var underscore = '_';
      var pattern = new RegExp(
        '(?:^|[^' + tag + digit + underscore + ']+)' +
          '[' + hash + ']' +
          '(' +
          '[' + tag + digit + underscore + ']*' +
          '[' + tag + ']+' +
          '[' + tag + digit + underscore + ']*' +
          ')' +
          '(?![' + hash + tag + digit + underscore + ']+)',
        'g');

  var matches;
  while ((matches = pattern.exec(str)) != null) {
    tags.push(matches[1]);
  }

  return tags;
}
